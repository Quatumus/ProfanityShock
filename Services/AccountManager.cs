using ProfanityShock.Config;
using ProfanityShock.Data;
using ProfanityShock.Services;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace ProfanityShock.Services
{
    public static class AccountManager
    {
        static AccountConfig AccountConfig = new AccountConfig()
        {
            Email = "",
            Password = "",
            Token = "",
            Backend = new Uri("https://api.openshock.app")
        };

        public static AccountConfig GetConfig()
        {
            return AccountConfig;
        }

        public static async Task LoadSave()
        {
            if (await AccountRepository.LoadAsync() != null)
            {
                AccountConfig = await AccountRepository.LoadAsync();
                NetManager.ChangeToken(AccountConfig.Token);
                await TestToken();
            }
        }

        public static async Task SaveConfig()
        {
            await AccountRepository.SaveItemAsync(AccountConfig);
            NetManager.ChangeToken(AccountConfig.Token);
        }

        private static async Task TestToken()
        {
            NetManager.ChangeToken(AccountConfig.Token);

            // Make the login request
            var response = NetManager.GetClient().GetAsync(AccountConfig.Backend + "1/tokens/self").GetAwaiter().GetResult();

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(await response.Content.ReadAsStringAsync());

                if (jsonResponse != null && jsonResponse.TryGetValue("permissions", out var permissions) &&
                    permissions is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.Array &&
                    jsonElement.EnumerateArray().Any(item => item.GetString() == "shockers.use"))
                {
                    Debug.Print("Token valid!");
                    return;
                }
                else
                {
                    Debug.Print("Insufficient permissions!");
                    NetManager.ChangeToken("");
                }
            }
            else
            {
                Debug.Print("Token invalid!");
                NetManager.ChangeToken("");
            }

            // Create new token if old token was invalid and account credentials are found
            if (AccountConfig.Email != "" && AccountConfig.Password != "")
            {
                var requestBody = new { password = AccountConfig.Password, usernameOrEmail = AccountConfig.Email, turnstileResponse = "1" };
                var content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
                response = NetManager.GetClient().PostAsync(AccountManager.GetConfig().Backend + "2/account/login", content).GetAwaiter().GetResult();

                if (response.IsSuccessStatusCode)
                {
                    Debug.Print("Token auto restore logged in!");

                    var json = JsonSerializer.Deserialize<Dictionary<string, object>>(await response.Content.ReadAsStringAsync());

                    var tokenRequest = new { name = "ProfanityShock autogenerated", permissions = new string[] { "shockers.use", "shockers.edit", "shockers.pause", "devices.edit", "devices.auth" } };
                    var tokenContent = new StringContent(JsonSerializer.Serialize(tokenRequest), Encoding.UTF8, "application/json");
                    var tokenResponse = NetManager.GetClient().PostAsync(AccountManager.GetConfig().Backend + "1/tokens", tokenContent).GetAwaiter().GetResult();
                    if (tokenResponse.IsSuccessStatusCode)
                    {
                        Debug.Print("Token created!");
                        var tokenJson = JsonSerializer.Deserialize<Dictionary<string, object>>(await tokenResponse.Content.ReadAsStringAsync());
                        if (tokenJson != null && tokenJson.TryGetValue("token", out var token))
                        {
                            Debug.Print("Token: " + token.ToString());
                            AccountConfig.Token = (token.ToString());
                            await SaveConfig();
                        }
                    }
                }
                else
                {
                    Debug.Print("Token restore failed!");
                }
            }
            else
            {
                Debug.Print("No account credentials found, auto token restore failed!");
            }
        }
    }
}
