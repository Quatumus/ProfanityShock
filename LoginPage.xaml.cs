using ProfanityShock.Config;
using ProfanityShock.Backend;
using ProfanityShock.Services;
using System.Diagnostics;
using System.Text.Json;
using System.Text;
using ProfanityShock;

namespace ProfanityShock
{
    public partial class LoginPage : ContentPage
    {
        int count = 0;
        AppConfig config = new AppConfig();
        HttpClient client = NetManager.GetClient();


        public LoginPage()
        {
            InitializeComponent();

            AppConfig config = AppConfig.GetConfig();

            if (config.Token == null)
            {
                Debug.Print("No token found");
            }
            else
            {
                Debug.Print("Token found: " + config.Token);
            }
        }

        private async void OnCounterClicked(object sender, EventArgs e)
        {
            count++;

            //if (count == 1)
            //    CounterBtn.Text = $"Clicked {count} time";
            //else
            //    CounterBtn.Text = $"Clicked {count} times";
            //
            //SemanticScreenReader.Announce(CounterBtn.Text);


            // testi mielessä hakee aktiiviset laitteet serveriltä ja tekee debug viestin

            //config.Backend = new Uri("https://api.openshock.app");

            string response = await client.GetStringAsync(config.Backend + "1/public/stats");

            Debug.Print(response);
        }

        private async void OnLoginButtonClicked(object sender, EventArgs e)
        {
            var usernameOrEmail = emailEntry.Text;
            var password = passwordEntry.Text;
            var turnstileResponse = "1";

            var requestBody = new {password, usernameOrEmail, turnstileResponse };
            var content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
            var response = client.PostAsync(config.Backend + "2/account/login", content).GetAwaiter().GetResult();

            if (response.IsSuccessStatusCode)
            {
                Debug.Print("We are logged in!");

                var json = JsonSerializer.Deserialize<Dictionary<string, object>>(await response.Content.ReadAsStringAsync());

                config.Email = usernameOrEmail;
                config.Password = password;

                var tokenRequest = new {name="ProfanityShock autogenerated DO NOT DELETE", permissions=new string[] {"shockers.use", "shockers.edit", "shockers.pause", "devices.edit", "devices.auth"}};
                var tokenContent = new StringContent(JsonSerializer.Serialize(tokenRequest), Encoding.UTF8, "application/json");
                var tokenResponse = client.PostAsync(config.Backend + "1/tokens", tokenContent).GetAwaiter().GetResult();
                if (tokenResponse.IsSuccessStatusCode)
                {
                    Debug.Print("Token created!");
                    var tokenJson = JsonSerializer.Deserialize<Dictionary<string, object>>(await tokenResponse.Content.ReadAsStringAsync());
                    if (tokenJson != null && tokenJson.TryGetValue("token", out var token))
                    {
                        Debug.Print("Token: " + token.ToString());
                        NetManager.ChangeToken(token.ToString());
                        config.Token = token.ToString();
                        AppConfig.SaveConfig(config);
                    }
                }
            }
            else
            {
                Debug.Print("Login failed!");
            }

            loginButton.Text = "Logging in...";
            SemanticScreenReader.Announce(loginButton.Text);
        }

        private void OnLogoutButtonClicked(object sender, EventArgs e)
        {
            var response = client.PostAsync(config.Backend + "1/account/logout", null).GetAwaiter().GetResult();

            if (response.IsSuccessStatusCode)
            {
                Debug.Print("Logout successful!");
            }
            else
            {
                Debug.Print("Logout failed!");
            }
        }

        private void OnSessionButtonClicked(object sender, EventArgs e)
        {
            var response = client.GetAsync(config.Backend + "1/users/self").GetAwaiter().GetResult();

            if (response.IsSuccessStatusCode)
            {
                var json = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();
                Debug.Print(json);
            }
        }

        private async void OnTokenLoginButtonClicked(object sender, EventArgs e)
        {
            var OpenShockToken = tokenEntry.Text;
            NetManager.ChangeToken(OpenShockToken);
            Debug.Print(NetManager.GetClient().DefaultRequestHeaders.ToString());

            // Make the login request
            var response = client.GetAsync("1/tokens/self").Result;

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(await response.Content.ReadAsStringAsync());

                if (jsonResponse != null && jsonResponse.TryGetValue("permissions", out var permissions) && 
                    permissions is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.Array &&
                    jsonElement.EnumerateArray().Any(item => item.GetString() == "shockers.use"))
                {
                    Debug.Print("Token valid!");

                    tokenLoginButton.Text = "Token Valid!";
                    SemanticScreenReader.Announce(loginButton.Text);
                }
                else
                {
                    Debug.Print("Insufficient permissions!");

                    tokenLoginButton.Text = "Token missing shockers.use permission!";
                    SemanticScreenReader.Announce(loginButton.Text);
                }
            }
            else
            {
                Debug.Print(response.StatusCode.ToString());

                tokenLoginButton.Text = "Error: " + response.StatusCode.ToString();
                SemanticScreenReader.Announce(loginButton.Text);
            }
        }
    }
}
